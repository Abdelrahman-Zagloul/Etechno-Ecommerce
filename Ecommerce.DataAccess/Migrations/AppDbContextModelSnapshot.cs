// <auto-generated />
using System;
using Ecommerce.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ecommerce.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Ecommerce.Models.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Models.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Mobiles"
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Laptops"
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "iPads"
                        },
                        new
                        {
                            Id = 4,
                            CategoryName = "Smart Watches"
                        });
                });

            modelBuilder.Entity("Ecommerce.Models.Models.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("OrderHeaderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderHeaderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Models.Models.OrderHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Carrier")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentIntentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ShippingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TrackingNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("OrderHeaders", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Models.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("ListPrice")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price100")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("Price50")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "Apple",
                            CategoryId = 1,
                            Description = "Apple smartphone with A16 Bionic chip and Dynamic Island.",
                            ISBN = "978-1-00-000001-0",
                            ImageUrl = "",
                            ListPrice = 1200m,
                            Name = "iPhone 14 Pro",
                            Price100 = 1100m,
                            Price50 = 1150m
                        },
                        new
                        {
                            Id = 2,
                            Author = "Samsung",
                            CategoryId = 1,
                            Description = "Flagship Android phone with excellent camera and display.",
                            ISBN = "978-1-00-000001-1",
                            ImageUrl = "",
                            ListPrice = 1100m,
                            Name = "Samsung Galaxy S23",
                            Price100 = 1000m,
                            Price50 = 1050m
                        },
                        new
                        {
                            Id = 3,
                            Author = "Xiaomi",
                            CategoryId = 1,
                            Description = "High-end phone with Leica camera and powerful Snapdragon processor.",
                            ISBN = "978-1-00-000001-2",
                            ImageUrl = "",
                            ListPrice = 900m,
                            Name = "Xiaomi 13 Pro",
                            Price100 = 800m,
                            Price50 = 850m
                        },
                        new
                        {
                            Id = 4,
                            Author = "Google",
                            CategoryId = 1,
                            Description = "Pixel phone with clean Android and great photography features.",
                            ISBN = "978-1-00-000001-3",
                            ImageUrl = "",
                            ListPrice = 950m,
                            Name = "Google Pixel 7",
                            Price100 = 850m,
                            Price50 = 900m
                        },
                        new
                        {
                            Id = 5,
                            Author = "OnePlus",
                            CategoryId = 1,
                            Description = "Flagship killer with fast charging and smooth performance.",
                            ISBN = "978-1-00-000001-4",
                            ImageUrl = "",
                            ListPrice = 800m,
                            Name = "OnePlus 11",
                            Price100 = 700m,
                            Price50 = 750m
                        },
                        new
                        {
                            Id = 6,
                            Author = "Apple",
                            CategoryId = 2,
                            Description = "Ultra-thin laptop with M2 chip and long battery life.",
                            ISBN = "978-1-00-000002-0",
                            ImageUrl = "",
                            ListPrice = 1300m,
                            Name = "MacBook Air M2",
                            Price100 = 1200m,
                            Price50 = 1250m
                        },
                        new
                        {
                            Id = 7,
                            Author = "Dell",
                            CategoryId = 2,
                            Description = "Premium Windows Ultrabook with compact design.",
                            ISBN = "978-1-00-000002-1",
                            ImageUrl = "",
                            ListPrice = 1250m,
                            Name = "Dell XPS 13",
                            Price100 = 1150m,
                            Price50 = 1200m
                        },
                        new
                        {
                            Id = 8,
                            Author = "HP",
                            CategoryId = 2,
                            Description = "2-in-1 touchscreen laptop with elegant build and strong specs.",
                            ISBN = "978-1-00-000002-2",
                            ImageUrl = "",
                            ListPrice = 1200m,
                            Name = "HP Specter x360",
                            Price100 = 1100m,
                            Price50 = 1150m
                        },
                        new
                        {
                            Id = 9,
                            Author = "Lenovo",
                            CategoryId = 2,
                            Description = "Business-class laptop with powerful performance and durability.",
                            ISBN = "978-1-00-000002-3",
                            ImageUrl = "",
                            ListPrice = 1400m,
                            Name = "Lenovo ThinkPad X1 Carbon",
                            Price100 = 1300m,
                            Price50 = 1350m
                        },
                        new
                        {
                            Id = 10,
                            Author = "ASUS",
                            CategoryId = 2,
                            Description = "Gaming laptop with Ryzen processor and high refresh rate screen.",
                            ISBN = "978-1-00-000002-4",
                            ImageUrl = "",
                            ListPrice = 1500m,
                            Name = "ASUS ROG Zephyrus G14",
                            Price100 = 1400m,
                            Price50 = 1450m
                        },
                        new
                        {
                            Id = 11,
                            Author = "Apple",
                            CategoryId = 3,
                            Description = "High-end iPad with M2 chip and ProMotion display.",
                            ISBN = "978-1-00-000003-0",
                            ImageUrl = "",
                            ListPrice = 1500m,
                            Name = "iPad Pro 12.9-inch (M2)",
                            Price100 = 1400m,
                            Price50 = 1450m
                        },
                        new
                        {
                            Id = 12,
                            Author = "Apple",
                            CategoryId = 3,
                            Description = "Lightweight iPad with M1 chip and 10.9-inch screen.",
                            ISBN = "978-1-00-000003-1",
                            ImageUrl = "",
                            ListPrice = 900m,
                            Name = "iPad Air 5th Gen",
                            Price100 = 800m,
                            Price50 = 850m
                        },
                        new
                        {
                            Id = 13,
                            Author = "Apple",
                            CategoryId = 3,
                            Description = "Affordable iPad with modern design and USB-C port.",
                            ISBN = "978-1-00-000003-2",
                            ImageUrl = "",
                            ListPrice = 600m,
                            Name = "iPad 10th Gen",
                            Price100 = 500m,
                            Price50 = 550m
                        },
                        new
                        {
                            Id = 14,
                            Author = "Apple",
                            CategoryId = 3,
                            Description = "Compact iPad with A15 Bionic chip and 8.3-inch screen.",
                            ISBN = "978-1-00-000003-3",
                            ImageUrl = "",
                            ListPrice = 700m,
                            Name = "iPad Mini 6",
                            Price100 = 600m,
                            Price50 = 650m
                        },
                        new
                        {
                            Id = 15,
                            Author = "Apple",
                            CategoryId = 3,
                            Description = "Powerful tablet with M2 chip and Apple Pencil 2 support.",
                            ISBN = "978-1-00-000003-4",
                            ImageUrl = "",
                            ListPrice = 1300m,
                            Name = "iPad Pro 11-inch",
                            Price100 = 1200m,
                            Price50 = 1250m
                        },
                        new
                        {
                            Id = 16,
                            Author = "Apple",
                            CategoryId = 4,
                            Description = "Latest Apple Watch with S9 chip and advanced health tracking.",
                            ISBN = "978-1-00-000004-0",
                            ImageUrl = "",
                            ListPrice = 500m,
                            Name = "Apple Watch Series 9",
                            Price100 = 450m,
                            Price50 = 470m
                        },
                        new
                        {
                            Id = 17,
                            Author = "Samsung",
                            CategoryId = 4,
                            Description = "Smart watch with AMOLED display and Wear OS.",
                            ISBN = "978-1-00-000004-1",
                            ImageUrl = "",
                            ListPrice = 450m,
                            Name = "Samsung Galaxy Watch 6",
                            Price100 = 400m,
                            Price50 = 420m
                        },
                        new
                        {
                            Id = 18,
                            Author = "Fitbit",
                            CategoryId = 4,
                            Description = "Health-focused smartwatch with stress tracking and ECG.",
                            ISBN = "978-1-00-000004-2",
                            ImageUrl = "",
                            ListPrice = 400m,
                            Name = "Fitbit Sense 2",
                            Price100 = 350m,
                            Price50 = 370m
                        },
                        new
                        {
                            Id = 19,
                            Author = "Garmin",
                            CategoryId = 4,
                            Description = "Fitness watch with GPS and voice assistant support.",
                            ISBN = "978-1-00-000004-3",
                            ImageUrl = "",
                            ListPrice = 550m,
                            Name = "Garmin Venue 2 Plus",
                            Price100 = 500m,
                            Price50 = 520m
                        },
                        new
                        {
                            Id = 20,
                            Author = "Huawei",
                            CategoryId = 4,
                            Description = "Stylish smartwatch with long battery life and health monitoring.",
                            ISBN = "978-1-00-000004-4",
                            ImageUrl = "",
                            ListPrice = 430m,
                            Name = "Huawei Watch GT 3",
                            Price100 = 380m,
                            Price50 = 400m
                        });
                });

            modelBuilder.Entity("Ecommerce.Models.Models.ShoppingCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ShoppingCart", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Models.Models.OrderDetail", b =>
                {
                    b.HasOne("Ecommerce.Models.Models.OrderHeader", "OrderHeader")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecommerce.Models.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderHeader");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Ecommerce.Models.Models.Product", b =>
                {
                    b.HasOne("Ecommerce.Models.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Ecommerce.Models.Models.ShoppingCart", b =>
                {
                    b.HasOne("Ecommerce.Models.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Ecommerce.Models.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Ecommerce.Models.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecommerce.Models.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Ecommerce.Models.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ecommerce.Models.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Ecommerce.Models.Models.OrderHeader", b =>
                {
                    b.Navigation("OrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
